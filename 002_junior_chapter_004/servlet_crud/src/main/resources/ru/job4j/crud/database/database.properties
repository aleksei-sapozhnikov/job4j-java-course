# Users database storage settings
db.type=postgresql
db.address=//localhost:5432
db.name=test_db
db.user=tester
db.password=password
# Structural changes
sql.structure.createTables=BEGIN; CREATE TABLE IF NOT EXISTS roles ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS countries ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS cities ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS users ( id SERIAL PRIMARY KEY, name TEXT, login TEXT UNIQUE, password TEXT, email TEXT, created TIMESTAMP WITH TIME ZONE, role_id INTEGER, country_id INTEGER REFERENCES countries (id), city_id INTEGER REFERENCES cities (id) ); COMMIT;
sql.structure.dropTables=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP TABLE %I CASCADE', tablename) AS table_name FROM pg_tables WHERE schemaname = 'public') LOOP EXECUTE brow.table_name; END LOOP; END; $$
sql.structure.dropFunctions=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP FUNCTION %I.%I(%s);', nspname, proname, oidvectortypes(proargtypes)) AS func_name FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid) WHERE ns.nspname = 'public' order by proname) LOOP EXECUTE brow.func_name; END LOOP; END; $$
# Create database functions
sql.createFunction.insertUser=CREATE OR REPLACE FUNCTION insertUser(_name TEXT, _login TEXT, _password TEXT, _email TEXT, _created TIMESTAMP WITH TIME ZONE, _role TEXT, _country TEXT, _city TEXT) RETURNS INTEGER AS $$ DECLARE _role_id INTEGER; _country_id INTEGER; _city_id INTEGER; BEGIN INSERT INTO countries (name) VALUES (_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (_city) ON CONFLICT DO NOTHING; INSERT INTO roles (name) VALUES (_role) ON CONFLICT DO NOTHING; _role_id := (SELECT roles.id FROM roles WHERE roles.name = _role); _country_id := (SELECT countries.id FROM countries WHERE countries.name = _country); _city_id := (SELECT cities.id FROM cities WHERE cities.name = _city); INSERT INTO users (name, login, password, email, created, role_id, country_id, city_id) VALUES (_name, _login, _password, _email, _created, _role_id, _country_id, _city_id); RETURN (SELECT users.id FROM users WHERE users.login = _login); END; $$ LANGUAGE plpgsql;
sql.createFunction.updateUser=CREATE OR REPLACE FUNCTION updateUser(_id INTEGER, _name TEXT, _login TEXT, _password TEXT, _email TEXT, _role TEXT, _country TEXT, _city TEXT) RETURNS INTEGER AS $$ DECLARE rows_updated INTEGER; _role_id INTEGER; _country_id INTEGER; _city_id INTEGER; BEGIN INSERT INTO roles (name) VALUES (_role) ON CONFLICT DO NOTHING; INSERT INTO countries (name) VALUES (_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (_city) ON CONFLICT DO NOTHING; _role_id := (SELECT roles.id FROM roles WHERE roles.name = _role); _country_id := (SELECT countries.id FROM countries WHERE countries.name = _country); _city_id := (SELECT cities.id FROM cities WHERE cities.name = _city); UPDATE users SET name = _name, login = _login, password = _password, email = _email, role_id = _role_id, country_id = _country_id, city_id = _city_id WHERE users.id = _id; GET DIAGNOSTICS rows_updated = ROW_COUNT; RETURN rows_updated; END; $$ LANGUAGE plpgsql;
# Queries to use in application
sql.query.insertUser=SELECT insertUser(_created => ?, _login => ?, _password => ?, _role => ?, _name => ?, _email => ?, _country => ?, _city => ?)
sql.query.updateUser=SELECT updateUser(_id => ?, _login => ?, _password => ?, _role => ?, _name => ?, _email => ?, _country => ?, _city => ?);
sql.query.deleteUserById=DELETE FROM users WHERE users.id = ?;
sql.query.findUserById=SELECT users.id, users.created, users.login, users.password, roles.name, users.name, users.email, countries.name, cities.name FROM users INNER JOIN roles ON users.role_id = roles.id INNER JOIN countries ON users.country_id = countries.id INNER JOIN cities ON users.city_id = cities.id WHERE users.id = ?;
sql.query.findAllUsers=SELECT users.id, users.created, users.login, users.password, roles.name, users.name, users.email, countries.name, cities.name FROM users INNER JOIN roles ON users.role_id = roles.id INNER JOIN countries ON users.country_id = countries.id INNER JOIN cities ON users.city_id = cities.id ORDER BY users.id;



