# Users database storage settings
db.type=postgresql
db.address=//localhost:5432
db.name=test_db
db.user=tester
db.password=password
# Structural changes
sql.structure.createTables=CREATE TABLE IF NOT EXISTS roles ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS countries ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS cities ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS users ( id SERIAL PRIMARY KEY, name TEXT, login TEXT UNIQUE, password TEXT, email TEXT, created TIMESTAMP WITH TIME ZONE, role_id INTEGER, country_id INTEGER REFERENCES countries (id), city_id INTEGER REFERENCES cities (id) );
sql.structure.dropTables=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP TABLE %I CASCADE', tablename) AS table_name FROM pg_tables WHERE schemaname = 'public') LOOP EXECUTE brow.table_name; END LOOP; END; $$
sql.structure.dropFunctions=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP FUNCTION %I.%I(%s);', nspname, proname, oidvectortypes(proargtypes)) AS func_name FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid) WHERE ns.nspname = 'public' order by proname) LOOP EXECUTE brow.func_name; END LOOP; END; $$
# Create database functions
sql.createFunction.insertUser=CREATE OR REPLACE FUNCTION insertUser( set_created TIMESTAMP WITH TIME ZONE, set_login TEXT, set_password TEXT, set_role TEXT, set_name TEXT, set_email TEXT, set_country TEXT, set_city TEXT) RETURNS INTEGER AS $$ DECLARE set_role_id INTEGER; set_country_id INTEGER; set_city_id INTEGER; BEGIN INSERT INTO countries (name) VALUES (set_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (set_city) ON CONFLICT DO NOTHING; INSERT INTO roles (name) VALUES (set_role) ON CONFLICT DO NOTHING; set_role_id := (SELECT roles.id FROM roles WHERE roles.name = set_role); set_country_id := (SELECT countries.id FROM countries WHERE countries.name = set_country); set_city_id := (SELECT cities.id FROM cities WHERE cities.name = set_city); INSERT INTO users (name, login, password, email, created, role_id, country_id, city_id) VALUES (set_name, set_login, set_password, set_email, set_created, set_role_id, set_country_id, set_city_id); RETURN (SELECT users.id FROM users WHERE users.login = set_login); END; $$ LANGUAGE plpgsql;
sql.createFunction.updateUser=CREATE OR REPLACE FUNCTION updateUser(upd_id INTEGER, set_login TEXT, set_password TEXT,set_role TEXT,set_name TEXT, set_email TEXT, set_country TEXT, set_city TEXT) RETURNS INTEGER AS $$ DECLARE rows_updated INTEGER; set_role_id INTEGER; set_country_id INTEGER; set_city_id INTEGER; BEGIN INSERT INTO roles (name) VALUES (set_role) ON CONFLICT DO NOTHING; INSERT INTO countries (name) VALUES (set_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (set_city) ON CONFLICT DO NOTHING; set_role_id := (SELECT roles.id FROM roles WHERE roles.name = set_role); set_country_id := (SELECT countries.id FROM countries WHERE countries.name = set_country); set_city_id := (SELECT cities.id FROM cities WHERE cities.name = set_city); UPDATE users SET name = set_name, login = set_login, password = set_password, email = set_email, role_id = set_role_id, country_id = set_country_id, city_id = set_city_id WHERE users.id = upd_id; GET DIAGNOSTICS rows_updated = ROW_COUNT; RETURN rows_updated; END; $$ LANGUAGE plpgsql;
# Queries to use in application
sql.query.insertUser=SELECT insertUser(?, ?, ?, ?, ?, ?, ?, ?);
sql.query.updateUser=SELECT updateUser(?, ?, ?, ?, ?, ?, ?, ?);
sql.query.deleteUserById=DELETE FROM users WHERE users.id = ?;
sql.query.findUserById=SELECT users.id, users.created, users.login, users.password, roles.name, users.name, users.email, countries.name, cities.name FROM users INNER JOIN roles ON users.role_id = roles.id INNER JOIN countries ON users.country_id = countries.id INNER JOIN cities ON users.city_id = cities.id WHERE users.id = ?;
sql.query.findAllUsers=SELECT users.id, users.created, users.login, users.password, roles.name, users.name, users.email, countries.name, cities.name FROM users INNER JOIN roles ON users.role_id = roles.id INNER JOIN countries ON users.country_id = countries.id INNER JOIN cities ON users.city_id = cities.id ORDER BY users.id;



