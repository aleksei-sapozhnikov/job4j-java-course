# Users database storage settings
db.type=postgresql
db.driver=org.postgresql.Driver
db.address=//localhost:5432
db.name=test_db
db.user=tester
db.password=password
# Clear
sql.clear.dropTables=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP TABLE %I CASCADE', tablename) AS table_name FROM pg_tables WHERE schemaname = 'public') LOOP EXECUTE brow.table_name; END LOOP; END; $$
sql.clear.dropFunctions=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP FUNCTION %I.%I(%s);', nspname, proname, oidvectortypes(proargtypes)) AS func_name FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid) WHERE ns.nspname = 'public' ORDER BY proname) LOOP EXECUTE brow.func_name; END LOOP; END; $$
# Creating tables
sql.table.roles=CREATE TABLE IF NOT EXISTS roles ( id SERIAL PRIMARY KEY, name TEXT UNIQUE );
sql.table.addresses=CREATE TABLE IF NOT EXISTS addresses ( id SERIAL PRIMARY KEY, name TEXT);
sql.table.music=CREATE TABLE IF NOT EXISTS music ( id SERIAL PRIMARY KEY, genre TEXT UNIQUE );
sql.table.users=CREATE TABLE IF NOT EXISTS users ( id SERIAL PRIMARY KEY, login TEXT UNIQUE, password TEXT, role_id INTEGER REFERENCES roles (id), address_id INTEGER UNIQUE REFERENCES addresses (id) );
sql.table.users_music=CREATE TABLE IF NOT EXISTS users_music ( id SERIAL PRIMARY KEY, user_id INTEGER REFERENCES users (id), music_id INTEGER REFERENCES music (id) );
# Operations
sql.user.add=
sql.user.get_by_id=WITH get_id AS (SELECT ?) SELECT users.id AS id, users.login AS login, users.password AS password, roles.name AS role, addresses.name AS address FROM users INNER JOIN roles ON users.role_id = roles.id INNER JOIN addresses ON users.address_id = addresses.id WHERE users.id = (SELECT * FROM get_id) ; insert into