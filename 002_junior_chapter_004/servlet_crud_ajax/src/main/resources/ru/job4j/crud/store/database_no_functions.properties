# Users database storage settings
db.type=postgresql
db.address=//localhost:5432
db.name=test_db
db.user=tester
db.password=password
# Structural changes
sql.structure.createTables=CREATE TABLE IF NOT EXISTS roles ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS countries ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS cities ( id SERIAL PRIMARY KEY, name TEXT UNIQUE ); CREATE TABLE IF NOT EXISTS users ( id SERIAL PRIMARY KEY, name TEXT, login TEXT UNIQUE, password TEXT, email TEXT, created TIMESTAMP WITH TIME ZONE, role_id INTEGER, country_id INTEGER REFERENCES countries (id), city_id INTEGER REFERENCES cities (id) );
sql.structure.dropTables=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP TABLE %I CASCADE', tablename) AS table_name FROM pg_tables WHERE schemaname = 'public') LOOP EXECUTE brow.table_name; END LOOP; END; $$
sql.structure.dropFunctions=DO $$ DECLARE brow RECORD; BEGIN FOR brow IN (SELECT format('DROP FUNCTION %I.%I(%s);', nspname, proname, oidvectortypes(proargtypes)) AS func_name FROM pg_proc INNER JOIN pg_namespace ns ON (pg_proc.pronamespace = ns.oid) WHERE ns.nspname = 'public' order by proname) LOOP EXECUTE brow.func_name; END LOOP; END; $$
# Create database functions - not used here, but just to remember how i did them
sql.createFunction.insertUser=CREATE OR REPLACE FUNCTION insertUser( set_created TIMESTAMP WITH TIME ZONE, set_login TEXT, set_password TEXT, set_role TEXT, set_name TEXT, set_email TEXT, set_country TEXT, set_city TEXT) RETURNS INTEGER AS $$ DECLARE set_role_id INTEGER; set_country_id INTEGER; set_city_id INTEGER; BEGIN INSERT INTO countries (name) VALUES (set_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (set_city) ON CONFLICT DO NOTHING; INSERT INTO roles (name) VALUES (set_role) ON CONFLICT DO NOTHING; set_role_id := (SELECT roles.id FROM roles WHERE roles.name = set_role); set_country_id := (SELECT countries.id FROM countries WHERE countries.name = set_country); set_city_id := (SELECT cities.id FROM cities WHERE cities.name = set_city); INSERT INTO users (name, login, password, email, created, role_id, country_id, city_id) VALUES (set_name, set_login, set_password, set_email, set_created, set_role_id, set_country_id, set_city_id); RETURN (SELECT users.id FROM users WHERE users.login = set_login); END; $$ LANGUAGE plpgsql;
sql.createFunction.updateUser=CREATE OR REPLACE FUNCTION updateUser(upd_id INTEGER, set_login TEXT, set_password TEXT,set_role TEXT,set_name TEXT, set_email TEXT, set_country TEXT, set_city TEXT) RETURNS INTEGER AS $$ DECLARE rows_updated INTEGER; set_role_id INTEGER; set_country_id INTEGER; set_city_id INTEGER; BEGIN INSERT INTO roles (name) VALUES (set_role) ON CONFLICT DO NOTHING; INSERT INTO countries (name) VALUES (set_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (set_city) ON CONFLICT DO NOTHING; set_role_id := (SELECT roles.id FROM roles WHERE roles.name = set_role); set_country_id := (SELECT countries.id FROM countries WHERE countries.name = set_country); set_city_id := (SELECT cities.id FROM cities WHERE cities.name = set_city); UPDATE users SET name = set_name, login = set_login, password = set_password, email = set_email, role_id = set_role_id, country_id = set_country_id, city_id = set_city_id WHERE users.id = upd_id; GET DIAGNOSTICS rows_updated = ROW_COUNT; RETURN rows_updated; END; $$ LANGUAGE plpgsql;
# Queries to use in application
sql.query.insertUser=WITH _created AS (SELECT cast(? AS TIMESTAMP)), _login AS (SELECT ?), _password AS (SELECT ?), _role AS (SELECT ?), _name AS ( SELECT ?), _email AS (SELECT ?), _country AS (SELECT ?), _city AS (SELECT ?), id_role AS (INSERT INTO roles (name) VALUES ((SELECT * FROM _role)) ON CONFLICT (name) DO UPDATE SET name = roles.name RETURNING id), id_country AS (INSERT INTO countries (name) VALUES ((SELECT * FROM _country)) ON CONFLICT (name) DO UPDATE SET name = countries.name RETURNING id), id_city AS (INSERT INTO cities (name) VALUES ((SELECT * FROM _city)) ON CONFLICT (name) DO UPDATE SET name = cities.name RETURNING id) INSERT INTO users(name, login, password, email, created, role_id, country_id, city_id) VALUES ((SELECT * FROM _name), (SELECT * FROM _login), (SELECT * FROM _password), (SELECT * FROM _email), (SELECT * FROM _created), (SELECT id FROM id_role), (SELECT id FROM id_country), (SELECT id FROM id_city)) RETURNING id;
sql.query.updateUser=WITH upd_id AS (SELECT ?), _login AS (SELECT ?), _password AS (SELECT ?), _role AS (SELECT ?), _name AS (SELECT ?), _email AS ( SELECT ?), _country AS (SELECT ?), _city AS (SELECT ?), id_role AS (INSERT INTO roles (name) VALUES ((SELECT * FROM _role)) ON CONFLICT (NAME) DO UPDATE SET NAME = roles.name RETURNING id), id_country AS (INSERT INTO countries (NAME) VALUES ((SELECT * FROM _country)) ON CONFLICT (NAME) DO UPDATE SET NAME = countries.name RETURNING id), id_city AS (INSERT INTO cities (NAME) VALUES ((SELECT * FROM _city)) ON CONFLICT (NAME) DO UPDATE SET NAME = cities.name RETURNING id) UPDATE users SET NAME = (select * from _name), LOGIN = (select * from _login), PASSWORD = (select * from _password), email = (select * from _email), role_id = (SELECT id FROM id_role), country_id = (SELECT id FROM id_country), city_id = (SELECT id FROM id_city) WHERE users.id = (select * from upd_id);
sql.query.deleteUserById=DELETE FROM users WHERE users.id = ?;
sql.query.findUserById=SELECT u.id, u.created, u.login, u.password, r.name, u.name, u.email, co.name, ci.name FROM users AS u INNER JOIN roles AS r ON u.role_id = r.id INNER JOIN countries AS co ON u.country_id = co.id INNER JOIN cities AS ci ON u.city_id = ci.id WHERE u.id = ?;
sql.query.findAllUsers=SELECT u.id, u.created, u.login, u.password, r.name, u.name, u.email, co.name, ci.name FROM users AS u INNER JOIN roles AS r ON u.role_id = r.id INNER JOIN countries AS co ON u.country_id = co.id INNER JOIN cities AS ci ON u.city_id = ci.id ORDER BY u.id;
sql.query.findAlLCountries=SELECT countries.name FROM countries ORDER BY countries.name;
sql.query.findAlLCities=SELECT cities.name FROM cities ORDER BY cities.name;


