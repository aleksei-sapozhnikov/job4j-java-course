# Use java
language: java

# Don't need super user
sudo: false

# Add PostgreSQL database
services:
  - postgresql: "10"

# Create testing database
before_script:
  - psql -c "CREATE DATABASE test_db;" -U postgres
  - psql -c "CREATE USER tester WITH PASSWORD 'password';" -U postgres -d test_db
  - psql -c "CREATE OR REPLACE FUNCTION insertUser(_name TEXT, _login TEXT, _password TEXT, _email TEXT, _created TIMESTAMP WITH TIME ZONE, _role TEXT, _country TEXT, _city TEXT) RETURNS INTEGER AS $$ DECLARE _role_id INTEGER; _country_id INTEGER; _city_id INTEGER; BEGIN INSERT INTO countries (name) VALUES (_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (_city) ON CONFLICT DO NOTHING; INSERT INTO roles (name) VALUES (_role) ON CONFLICT DO NOTHING; _role_id := (SELECT roles.id FROM roles WHERE roles.name = _role); _country_id := (SELECT countries.id FROM countries WHERE countries.name = _country); _city_id := (SELECT cities.id FROM cities WHERE cities.name = _city); INSERT INTO users (name, login, password, email, created, role_id, country_id, city_id) VALUES (_name, _login, _password, _email, _created, _role_id, _country_id, _city_id); RETURN (SELECT users.id FROM users WHERE users.login = _login); END; $$ LANGUAGE plpgsql;" -U tester -d test_db
  - psql -c "CREATE OR REPLACE FUNCTION updateUser(_id    INTEGER, _name TEXT, _login TEXT, _password TEXT, _email TEXT, _role TEXT, _country TEXT, _city TEXT) RETURNS INTEGER AS $$ DECLARE rows_updated INTEGER; _role_id     INTEGER; _country_id  INTEGER; _city_id     INTEGER; BEGIN INSERT INTO roles (name) VALUES (_role) ON CONFLICT DO NOTHING; INSERT INTO countries (name) VALUES (_country) ON CONFLICT DO NOTHING; INSERT INTO cities (name) VALUES (_city) ON CONFLICT DO NOTHING; _role_id := (SELECT roles.id FROM roles WHERE roles.name = _role); _country_id := (SELECT countries.id FROM countries WHERE countries.name = _country); _city_id := (SELECT cities.id FROM cities WHERE cities.name = _city); UPDATE users SET name  = _name, login = _login, password = _password, email = _email, role_id = _role_id, country_id = _country_id, city_id = _city_id WHERE users.id = _id; GET DIAGNOSTICS rows_updated = ROW_COUNT; RETURN rows_updated; END; $$ LANGUAGE plpgsql;" -U tester -d test_db

# Code coverage count after successful build
after_success:
  - bash <(curl -s https://codecov.io/bash)

# Notification if build failed.
notifications:
  email:
    recipients:
      - vermucht@gmail.com
    on_success: never   # default: change
on_failure: always      # default: always